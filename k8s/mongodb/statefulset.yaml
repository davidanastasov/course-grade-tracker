apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb
  namespace: course-grade-tracker
  labels:
    app: mongodb
spec:
  serviceName: "mongodb"
  replicas: 3
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
        - name: mongodb
          image: mongo:8
          command:
            - mongod
            - "--replSet"
            - "rs0"
            - "--bind_ip_all"
          ports:
            - containerPort: 27017
          env:
            - name: MONGO_INITDB_ROOT_USERNAME
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: MONGODB_ROOT_USERNAME
            - name: MONGO_INITDB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: MONGODB_ROOT_PASSWORD
            - name: MONGO_INITDB_DATABASE
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: DATABASE_NAME

          volumeMounts:
            - name: mongodb-data
              mountPath: /data/db

          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
              
          livenessProbe:
            exec:
              command:
                - mongosh
                - --eval
                - "\"db.runCommand('ping').ok\""
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            exec:
              command:
                - mongosh
                - --eval
                - "\"db.runCommand('ping').ok\""
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 5


        - name: rs-init
          image: mongo:8
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MONGO_INITDB_ROOT_USERNAME
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: MONGODB_ROOT_USERNAME
            - name: MONGO_INITDB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: MONGODB_ROOT_PASSWORD
          command:
            - /bin/sh
            - -c
            - |
              ORDINAL=$(echo $POD_NAME | awk -F '-' '{print $NF}')
              if [ "$ORDINAL" != "0" ]; then
                echo "Not primary pod ($POD_NAME). Exiting rs-init sidecar."
                while true; do sleep 3600; done
              fi

              echo "Running replica set initiation on $POD_NAME..."

              # Wait for mongod to be ready
              until mongosh --host localhost -u "$MONGO_INITDB_ROOT_USERNAME" -p "$MONGO_INITDB_ROOT_PASSWORD" --authenticationDatabase admin --eval "db.adminCommand('ping')" > /dev/null 2>&1; do
                echo "Waiting for MongoDB to be available..."
                sleep 5
              done

              # Retry until rs.initiate() succeeds or is already initiated
              while true; do
                echo "Attempting replica set initiation..."
                mongosh --host localhost -u "$MONGO_INITDB_ROOT_USERNAME" -p "$MONGO_INITDB_ROOT_PASSWORD" --authenticationDatabase admin --eval '
                  try {
                    rs.initiate({
                      _id: "rs0",
                      members: [
                        { _id: 0, host: "mongodb-0.mongodb.course-grade-tracker.svc.cluster.local:27017" },
                        { _id: 1, host: "mongodb-1.mongodb.course-grade-tracker.svc.cluster.local:27017" },
                        { _id: 2, host: "mongodb-2.mongodb.course-grade-tracker.svc.cluster.local:27017" }
                      ]
                    });
                  } catch (e) {
                    if (e.codeName === "AlreadyInitialized") {
                      print("Replica set already initialized.");
                      quit(0);
                    } else {
                      print("Replica set initiation failed, retrying...");
                      quit(1);
                    }
                  }
                '

                if [ $? -eq 0 ]; then
                  echo "Replica set successfully initiated or already initialized."
                  break
                fi

                echo "Retrying replica set initiation in 10 seconds..."
                sleep 10
              done

              # Keep the container alive
              while true; do sleep 3600; done


  volumeClaimTemplates:
    - metadata:
        name: mongodb-data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 2Gi